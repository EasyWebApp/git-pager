//
//  Generated by https://www.npmjs.com/package/amd-bundle
//
(function (factory) {

    if ((typeof define === 'function')  &&  define.amd)
        define('git-element', ["web-cell"], factory);
    else if (typeof module === 'object')
        return  module.exports = factory.call(global,require('web-cell'));
    else
        return  this['git-element'] = factory.call(self,this['web-cell']);

})(function (web_cell) {

function merge(base, path) {
  return (base + '/' + path).replace(/\/\//g, '/').replace(/[^/.]+\/\.\.\//g, '').replace(/\.\//g, function (match, index, input) {
    return input[index - 1] === '.' ? match : '';
  });
}

function outPackage(name) {
  return /^[^./]/.test(name);
}

    var require = (typeof module === 'object') ?
        function () {

            return  module.require.apply(module, arguments);
        } : (
            this.require  ||  function (name) {

                if (self[name] != null)  return self[name];

                throw ReferenceError('Can\'t find "' + name + '" module');
            }
        );

    var _include_ = include.bind(null, './');

    function include(base, path) {

        path = outPackage( path )  ?  path  :  ('./' + merge(base, path));

        var module = _module_[path], exports;

        if (! module)  return require(path);

        if (! module.exports) {

            module.exports = { };

            var dependency = module.dependency;

            for (var i = 0;  dependency[i];  i++)
                module.dependency[i] = _include_( dependency[i] );

            exports = module.factory.apply(
                null,  module.dependency.concat(
                    include.bind(null, module.base),  module.exports,  module
                )
            );

            if (exports != null)  module.exports = exports;

            delete module.dependency;  delete module.factory;
        }

        return module.exports;
    }

function _typeof(obj) {
    if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {
        _typeof = function _typeof(obj) {
            return typeof obj;
        };
    } else {
        _typeof = function _typeof(obj) {
            return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj;
        };
    }
    return _typeof(obj);
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}

function _asyncToGenerator(fn) {
    return function() {
        var self = this,
            args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(
                    gen,
                    resolve,
                    reject,
                    _next,
                    _throw,
                    'next',
                    value
                );
            }
            function _throw(err) {
                asyncGeneratorStep(
                    gen,
                    resolve,
                    reject,
                    _next,
                    _throw,
                    'throw',
                    err
                );
            }
            _next(undefined);
        });
    };
}

function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === 'function') {
            ownKeys = ownKeys.concat(
                Object.getOwnPropertySymbols(source).filter(function(sym) {
                    return Object.getOwnPropertyDescriptor(
                        source,
                        sym
                    ).enumerable;
                })
            );
        }
        ownKeys.forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
    }
    return target;
}

function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function');
    }
}

function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ('value' in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}

function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}

function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === 'object' || typeof call === 'function')) {
        return call;
    }
    return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
    if (self === void 0) {
        throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
        );
    }
    return self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError(
            'Super expression must either be null or a function'
        );
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: { value: subClass, writable: true, configurable: true }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
}

function _wrapNativeSuper(Class) {
    var _cache = typeof Map === 'function' ? new Map() : undefined;
    _wrapNativeSuper = function _wrapNativeSuper(Class) {
        if (Class === null || !_isNativeFunction(Class)) return Class;
        if (typeof Class !== 'function') {
            throw new TypeError(
                'Super expression must either be null or a function'
            );
        }
        if (typeof _cache !== 'undefined') {
            if (_cache.has(Class)) return _cache.get(Class);
            _cache.set(Class, Wrapper);
        }
        function Wrapper() {
            return _construct(
                Class,
                arguments,
                _getPrototypeOf(this).constructor
            );
        }
        Wrapper.prototype = Object.create(Class.prototype, {
            constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        return _setPrototypeOf(Wrapper, Class);
    };
    return _wrapNativeSuper(Class);
}

function isNativeReflectConstruct() {
    if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === 'function') return true;
    try {
        Date.prototype.toString.call(
            Reflect.construct(Date, [], function() {})
        );
        return true;
    } catch (e) {
        return false;
    }
}

function _construct(Parent, args, Class) {
    if (isNativeReflectConstruct()) {
        _construct = Reflect.construct;
    } else {
        _construct = function _construct(Parent, args, Class) {
            var a = [null];
            a.push.apply(a, args);
            var Constructor = Function.bind.apply(Parent, a);
            var instance = new Constructor();
            if (Class) _setPrototypeOf(instance, Class.prototype);
            return instance;
        };
    }
    return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf('[native code]') !== -1;
}

function _setPrototypeOf(o, p) {
    _setPrototypeOf =
        Object.setPrototypeOf ||
        function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
    return _setPrototypeOf(o, p);
}

function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf
        ? Object.getPrototypeOf
        : function _getPrototypeOf(o) {
              return o.__proto__ || Object.getPrototypeOf(o);
          };
    return _getPrototypeOf(o);
}

var _module_ = {
    './index': {
        base: '.',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            exports.default = void 0;

            var _webCell = require('web-cell');

            var GitElement =
                /*#__PURE__*/
                (function(_HTMLElement) {
                    _inherits(GitElement, _HTMLElement);

                    function GitElement() {
                        _classCallCheck(this, GitElement);

                        return _possibleConstructorReturn(
                            this,
                            _getPrototypeOf(GitElement).call(this)
                        );
                    }

                    _createClass(GitElement, null, [
                        {
                            key: 'fetch',
                            value: function fetch(URI, method, body, header) {
                                return (0, _webCell.request)(
                                    new URL(URI, 'https://api.github.com'),
                                    method,
                                    body,
                                    _objectSpread(
                                        {
                                            Authorization: 'token ' + this.token
                                        },
                                        header
                                    )
                                );
                            }
                        },
                        {
                            key: 'encodeBase64',
                            value: function encodeBase64(raw) {
                                return self.btoa(
                                    encodeURIComponent(raw).replace(
                                        /%([0-9A-F]{2})/g,
                                        function(_, p1) {
                                            return String.fromCharCode(
                                                '0x' + p1
                                            );
                                        }
                                    )
                                );
                            }
                        },
                        {
                            key: 'decodeBase64',
                            value: function decodeBase64(raw) {
                                return decodeURIComponent(
                                    self
                                        .atob(raw)
                                        .split('')
                                        .map(function(char) {
                                            return (
                                                '%' +
                                                (
                                                    '00' +
                                                    char
                                                        .charCodeAt(0)
                                                        .toString(16)
                                                ).slice(-2)
                                            );
                                        })
                                        .join('')
                                );
                            }
                            /**
                             * @param {String|URL} URI - GitHub content URL
                             *
                             * @return {String} File content
                             */
                        },
                        {
                            key: 'fileOf',
                            value: (function() {
                                var _fileOf = _asyncToGenerator(
                                    /*#__PURE__*/
                                    regeneratorRuntime.mark(function _callee(
                                        URI
                                    ) {
                                        return regeneratorRuntime.wrap(
                                            function _callee$(_context) {
                                                while (1) {
                                                    switch (
                                                        (_context.prev =
                                                            _context.next)
                                                    ) {
                                                        case 0:
                                                            _context.t0 = this;
                                                            _context.next = 3;
                                                            return this.fetch(
                                                                URI
                                                            );

                                                        case 3:
                                                            _context.t1 =
                                                                _context.sent.content;
                                                            return _context.abrupt(
                                                                'return',
                                                                _context.t0.decodeBase64.call(
                                                                    _context.t0,
                                                                    _context.t1
                                                                )
                                                            );

                                                        case 5:
                                                        case 'end':
                                                            return _context.stop();
                                                    }
                                                }
                                            },
                                            _callee,
                                            this
                                        );
                                    })
                                );

                                function fileOf(_x) {
                                    return _fileOf.apply(this, arguments);
                                }

                                return fileOf;
                            })()
                            /**
                             * @param {String} repository - For example: `userID/repo`
                             * @param {String} path       - File path in `repository`
                             *
                             * @return {String} GitHub Pages URL of this file
                             */
                        },
                        {
                            key: 'pageOf',
                            value: function pageOf(repository, path) {
                                repository = repository.split('/');
                                repository[0] += '.github.io';
                                return (
                                    '' +
                                    new URL(
                                        path,
                                        'https://'
                                            .concat(repository[0], '/')
                                            .concat(
                                                repository[0] === repository[1]
                                                    ? ''
                                                    : repository[1] + '/'
                                            )
                                    )
                                );
                            }
                            /**
                             * @param {String|URL} URI - File path
                             *
                             * @return {Boolean}
                             */
                        },
                        {
                            key: 'isGitMarkdown',
                            value: function isGitMarkdown(URI) {
                                return (
                                    /\.(md|markdown)/i.test(URI) ||
                                    /^(ReadMe|Contributing|License)\.?/.test(
                                        URI
                                    )
                                );
                            }
                            /**
                             * @param {String} [keyWord='']
                             * @param {Object} [condition]    - https://developer.github.com/v3/search/#parameters-2
                             * @param {String} [sort]
                             * @param {String} [order]
                             * @param {Number} [per_page=100]
                             *
                             * @return {Promise<Object>}
                             */
                        },
                        {
                            key: 'search',
                            value: function search(
                                keyWord,
                                condition,
                                sort,
                                order
                            ) {
                                var per_page =
                                    arguments.length > 4 &&
                                    arguments[4] !== undefined
                                        ? arguments[4]
                                        : 100;
                                keyWord = [keyWord];

                                for (var key in condition) {
                                    keyWord.push(
                                        ''
                                            .concat(key, ':')
                                            .concat(condition[key])
                                    );
                                }

                                return this.fetch(
                                    'search/code?'.concat(
                                        new URLSearchParams({
                                            q: keyWord.join(' '),
                                            sort: sort,
                                            order: order,
                                            per_page: per_page
                                        })
                                    )
                                );
                            }
                        }
                    ]);

                    return GitElement;
                })(_wrapNativeSuper(HTMLElement));

            exports.default = GitElement;
        }
    },
    'web-cell': {
        exports: web_cell
    }
};

    return _include_('./index');
});