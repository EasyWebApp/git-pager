//
//  Generated by https://www.npmjs.com/package/amd-bundle
//
(function (factory) {

    if ((typeof define === 'function')  &&  define.amd)
        define('git-path', ["web-cell","git-element"], factory);
    else if (typeof module === 'object')
        return  module.exports = factory.call(global,require('web-cell'),require('git-element'));
    else
        return  this['git-path'] = factory.call(self,this['web-cell'],this['git-element']);

})(function (web_cell,git_element) {

function merge(base, path) {
  return (base + '/' + path).replace(/\/\//g, '/').replace(/[^/.]+\/\.\.\//g, '').replace(/\.\//g, function (match, index, input) {
    return input[index - 1] === '.' ? match : '';
  });
}

function outPackage(name) {
  return /^[^./]/.test(name);
}

    var require = (typeof module === 'object') ?
        function () {

            return  module.require.apply(module, arguments);
        } : (
            this.require  ||  function (name) {

                if (self[name] != null)  return self[name];

                throw ReferenceError('Can\'t find "' + name + '" module');
            }
        );

    var _include_ = include.bind(null, './');

    function include(base, path) {

        path = outPackage( path )  ?  path  :  ('./' + merge(base, path));

        var module = _module_[path], exports;

        if (! module)  return require(path);

        if (! module.exports) {

            module.exports = { };

            var dependency = module.dependency;

            for (var i = 0;  dependency[i];  i++)
                module.dependency[i] = _include_( dependency[i] );

            exports = module.factory.apply(
                null,  module.dependency.concat(
                    include.bind(null, module.base),  module.exports,  module
                )
            );

            if (exports != null)  module.exports = exports;

            delete module.dependency;  delete module.factory;
        }

        return module.exports;
    }

function _typeof(obj) {
    if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {
        _typeof = function _typeof(obj) {
            return typeof obj;
        };
    } else {
        _typeof = function _typeof(obj) {
            return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj;
        };
    }
    return _typeof(obj);
}

function _toConsumableArray(arr) {
    return (
        _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread()
    );
}

function _nonIterableSpread() {
    throw new TypeError('Invalid attempt to spread non-iterable instance');
}

function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
        for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
        }
        return arr2;
    }
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}

function _asyncToGenerator(fn) {
    return function() {
        var self = this,
            args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(
                    gen,
                    resolve,
                    reject,
                    _next,
                    _throw,
                    'next',
                    value
                );
            }
            function _throw(err) {
                asyncGeneratorStep(
                    gen,
                    resolve,
                    reject,
                    _next,
                    _throw,
                    'throw',
                    err
                );
            }
            _next(undefined);
        });
    };
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function');
    }
}

function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === 'object' || typeof call === 'function')) {
        return call;
    }
    return _assertThisInitialized(self);
}

function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf
        ? Object.getPrototypeOf
        : function _getPrototypeOf(o) {
              return o.__proto__ || Object.getPrototypeOf(o);
          };
    return _getPrototypeOf(o);
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError(
            'Super expression must either be null or a function'
        );
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: { value: subClass, writable: true, configurable: true }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
    _setPrototypeOf =
        Object.setPrototypeOf ||
        function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
    return _setPrototypeOf(o, p);
}

function _assertThisInitialized(self) {
    if (self === void 0) {
        throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
        );
    }
    return self;
}

function _decorate(decorators, factory, superClass) {
    var r = factory(function initialize(O) {
        _initializeInstanceElements(O, decorated.elements);
    }, superClass);
    var decorated = _decorateClass(
        _coalesceClassElements(r.d.map(_createElementDescriptor)),
        decorators
    );
    _initializeClassElements(r.F, decorated.elements);
    return _runClassFinishers(r.F, decorated.finishers);
}

function _createElementDescriptor(def) {
    var key = _toPropertyKey(def.key);
    var descriptor;
    if (def.kind === 'method') {
        descriptor = {
            value: def.value,
            writable: true,
            configurable: true,
            enumerable: false
        };
        Object.defineProperty(def.value, 'name', {
            value: _typeof(key) === 'symbol' ? '' : key,
            configurable: true
        });
    } else if (def.kind === 'get') {
        descriptor = { get: def.value, configurable: true, enumerable: false };
    } else if (def.kind === 'set') {
        descriptor = { set: def.value, configurable: true, enumerable: false };
    } else if (def.kind === 'field') {
        descriptor = { configurable: true, writable: true, enumerable: true };
    }
    var element = {
        kind: def.kind === 'field' ? 'field' : 'method',
        key: key,
        placement: def.static
            ? 'static'
            : def.kind === 'field'
            ? 'own'
            : 'prototype',
        descriptor: descriptor
    };
    if (def.decorators) element.decorators = def.decorators;
    if (def.kind === 'field') element.initializer = def.value;
    return element;
}

function _coalesceGetterSetter(element, other) {
    if (element.descriptor.get !== undefined) {
        other.descriptor.get = element.descriptor.get;
    } else {
        other.descriptor.set = element.descriptor.set;
    }
}

function _coalesceClassElements(elements) {
    var newElements = [];
    var isSameElement = function isSameElement(other) {
        return (
            other.kind === 'method' &&
            other.key === element.key &&
            other.placement === element.placement
        );
    };
    for (var i = 0; i < elements.length; i++) {
        var element = elements[i];
        var other;
        if (
            element.kind === 'method' &&
            (other = newElements.find(isSameElement))
        ) {
            if (
                _isDataDescriptor(element.descriptor) ||
                _isDataDescriptor(other.descriptor)
            ) {
                if (_hasDecorators(element) || _hasDecorators(other)) {
                    throw new ReferenceError(
                        'Duplicated methods (' +
                            element.key +
                            ") can't be decorated."
                    );
                }
                other.descriptor = element.descriptor;
            } else {
                if (_hasDecorators(element)) {
                    if (_hasDecorators(other)) {
                        throw new ReferenceError(
                            "Decorators can't be placed on different accessors with for " +
                                'the same property (' +
                                element.key +
                                ').'
                        );
                    }
                    other.decorators = element.decorators;
                }
                _coalesceGetterSetter(element, other);
            }
        } else {
            newElements.push(element);
        }
    }
    return newElements;
}

function _hasDecorators(element) {
    return element.decorators && element.decorators.length;
}

function _isDataDescriptor(desc) {
    return (
        desc !== undefined &&
        !(desc.value === undefined && desc.writable === undefined)
    );
}

function _initializeClassElements(F, elements) {
    var proto = F.prototype;
    ['method', 'field'].forEach(function(kind) {
        elements.forEach(function(element) {
            var placement = element.placement;
            if (
                element.kind === kind &&
                (placement === 'static' || placement === 'prototype')
            ) {
                var receiver = placement === 'static' ? F : proto;
                _defineClassElement(receiver, element);
            }
        });
    });
}

function _initializeInstanceElements(O, elements) {
    ['method', 'field'].forEach(function(kind) {
        elements.forEach(function(element) {
            if (element.kind === kind && element.placement === 'own') {
                _defineClassElement(O, element);
            }
        });
    });
}

function _defineClassElement(receiver, element) {
    var descriptor = element.descriptor;
    if (element.kind === 'field') {
        var initializer = element.initializer;
        descriptor = {
            enumerable: descriptor.enumerable,
            writable: descriptor.writable,
            configurable: descriptor.configurable,
            value: initializer === void 0 ? void 0 : initializer.call(receiver)
        };
    }
    Object.defineProperty(receiver, element.key, descriptor);
}

function _decorateClass(elements, decorators) {
    var newElements = [];
    var finishers = [];
    var placements = { static: [], prototype: [], own: [] };
    elements.forEach(function(element) {
        _addElementPlacement(element, placements);
    });
    elements.forEach(function(element) {
        if (!_hasDecorators(element)) return newElements.push(element);
        var elementFinishersExtras = _decorateElement(element, placements);
        newElements.push(elementFinishersExtras.element);
        newElements.push.apply(newElements, elementFinishersExtras.extras);
        finishers.push.apply(finishers, elementFinishersExtras.finishers);
    });
    if (!decorators) {
        return { elements: newElements, finishers: finishers };
    }
    var result = _decorateConstructor(newElements, decorators);
    finishers.push.apply(finishers, result.finishers);
    result.finishers = finishers;
    return result;
}

function _addElementPlacement(element, placements, silent) {
    var keys = placements[element.placement];
    if (!silent && keys.indexOf(element.key) !== -1) {
        throw new TypeError('Duplicated element (' + element.key + ')');
    }
    keys.push(element.key);
}

function _decorateElement(element, placements) {
    var extras = [];
    var finishers = [];
    for (
        var decorators = element.decorators, i = decorators.length - 1;
        i >= 0;
        i--
    ) {
        var keys = placements[element.placement];
        keys.splice(keys.indexOf(element.key), 1);
        var elementObject = _fromElementDescriptor(element);
        var elementFinisherExtras = _toElementFinisherExtras(
            (0, decorators[i])(elementObject) || elementObject
        );
        element = elementFinisherExtras.element;
        _addElementPlacement(element, placements);
        if (elementFinisherExtras.finisher) {
            finishers.push(elementFinisherExtras.finisher);
        }
        var newExtras = elementFinisherExtras.extras;
        if (newExtras) {
            for (var j = 0; j < newExtras.length; j++) {
                _addElementPlacement(newExtras[j], placements);
            }
            extras.push.apply(extras, newExtras);
        }
    }
    return { element: element, finishers: finishers, extras: extras };
}

function _decorateConstructor(elements, decorators) {
    var finishers = [];
    for (var i = decorators.length - 1; i >= 0; i--) {
        var obj = _fromClassDescriptor(elements);
        var elementsAndFinisher = _toClassDescriptor(
            (0, decorators[i])(obj) || obj
        );
        if (elementsAndFinisher.finisher !== undefined) {
            finishers.push(elementsAndFinisher.finisher);
        }
        if (elementsAndFinisher.elements !== undefined) {
            elements = elementsAndFinisher.elements;
            for (var j = 0; j < elements.length - 1; j++) {
                for (var k = j + 1; k < elements.length; k++) {
                    if (
                        elements[j].key === elements[k].key &&
                        elements[j].placement === elements[k].placement
                    ) {
                        throw new TypeError(
                            'Duplicated element (' + elements[j].key + ')'
                        );
                    }
                }
            }
        }
    }
    return { elements: elements, finishers: finishers };
}

function _fromElementDescriptor(element) {
    var obj = {
        kind: element.kind,
        key: element.key,
        placement: element.placement,
        descriptor: element.descriptor
    };
    var desc = { value: 'Descriptor', configurable: true };
    Object.defineProperty(obj, Symbol.toStringTag, desc);
    if (element.kind === 'field') obj.initializer = element.initializer;
    return obj;
}

function _toElementDescriptors(elementObjects) {
    if (elementObjects === undefined) return;
    return _toArray(elementObjects).map(function(elementObject) {
        var element = _toElementDescriptor(elementObject);
        _disallowProperty(elementObject, 'finisher', 'An element descriptor');
        _disallowProperty(elementObject, 'extras', 'An element descriptor');
        return element;
    });
}

function _toElementDescriptor(elementObject) {
    var kind = String(elementObject.kind);
    if (kind !== 'method' && kind !== 'field') {
        throw new TypeError(
            'An element descriptor\'s .kind property must be either "method" or' +
                ' "field", but a decorator created an element descriptor with' +
                ' .kind "' +
                kind +
                '"'
        );
    }
    var key = _toPropertyKey(elementObject.key);
    var placement = String(elementObject.placement);
    if (
        placement !== 'static' &&
        placement !== 'prototype' &&
        placement !== 'own'
    ) {
        throw new TypeError(
            'An element descriptor\'s .placement property must be one of "static",' +
                ' "prototype" or "own", but a decorator created an element descriptor' +
                ' with .placement "' +
                placement +
                '"'
        );
    }
    var descriptor = elementObject.descriptor;
    _disallowProperty(elementObject, 'elements', 'An element descriptor');
    var element = {
        kind: kind,
        key: key,
        placement: placement,
        descriptor: Object.assign({}, descriptor)
    };
    if (kind !== 'field') {
        _disallowProperty(elementObject, 'initializer', 'A method descriptor');
    } else {
        _disallowProperty(
            descriptor,
            'get',
            'The property descriptor of a field descriptor'
        );
        _disallowProperty(
            descriptor,
            'set',
            'The property descriptor of a field descriptor'
        );
        _disallowProperty(
            descriptor,
            'value',
            'The property descriptor of a field descriptor'
        );
        element.initializer = elementObject.initializer;
    }
    return element;
}

function _toElementFinisherExtras(elementObject) {
    var element = _toElementDescriptor(elementObject);
    var finisher = _optionalCallableProperty(elementObject, 'finisher');
    var extras = _toElementDescriptors(elementObject.extras);
    return { element: element, finisher: finisher, extras: extras };
}

function _fromClassDescriptor(elements) {
    var obj = { kind: 'class', elements: elements.map(_fromElementDescriptor) };
    var desc = { value: 'Descriptor', configurable: true };
    Object.defineProperty(obj, Symbol.toStringTag, desc);
    return obj;
}

function _toClassDescriptor(obj) {
    var kind = String(obj.kind);
    if (kind !== 'class') {
        throw new TypeError(
            'A class descriptor\'s .kind property must be "class", but a decorator' +
                ' created a class descriptor with .kind "' +
                kind +
                '"'
        );
    }
    _disallowProperty(obj, 'key', 'A class descriptor');
    _disallowProperty(obj, 'placement', 'A class descriptor');
    _disallowProperty(obj, 'descriptor', 'A class descriptor');
    _disallowProperty(obj, 'initializer', 'A class descriptor');
    _disallowProperty(obj, 'extras', 'A class descriptor');
    var finisher = _optionalCallableProperty(obj, 'finisher');
    var elements = _toElementDescriptors(obj.elements);
    return { elements: elements, finisher: finisher };
}

function _disallowProperty(obj, name, objectType) {
    if (obj[name] !== undefined) {
        throw new TypeError(
            objectType + " can't have a ." + name + ' property.'
        );
    }
}

function _optionalCallableProperty(obj, name) {
    var value = obj[name];
    if (value !== undefined && typeof value !== 'function') {
        throw new TypeError("Expected '" + name + "' to be a function");
    }
    return value;
}

function _runClassFinishers(constructor, finishers) {
    for (var i = 0; i < finishers.length; i++) {
        var newConstructor = (0, finishers[i])(constructor);
        if (newConstructor !== undefined) {
            if (typeof newConstructor !== 'function') {
                throw new TypeError('Finishers must return a constructor.');
            }
            constructor = newConstructor;
        }
    }
    return constructor;
}

function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, 'string');
    return _typeof(key) === 'symbol' ? key : String(key);
}

function _toPrimitive(input, hint) {
    if (_typeof(input) !== 'object' || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || 'default');
        if (_typeof(res) !== 'object') return res;
        throw new TypeError('@@toPrimitive must return a primitive value.');
    }
    return (hint === 'string' ? String : Number)(input);
}

function _toArray(arr) {
    return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest();
}

function _nonIterableRest() {
    throw new TypeError('Invalid attempt to destructure non-iterable instance');
}

function _iterableToArray(iter) {
    if (
        Symbol.iterator in Object(iter) ||
        Object.prototype.toString.call(iter) === '[object Arguments]'
    )
        return Array.from(iter);
}

function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}

var _module_ = {
    './index.html': {
        base: '.',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            exports.default = void 0;
            var _default =
                '<template>\n    <style>@import \'source/common.css\';\n:host {\n  display: block;\n}\nselect-input {\n  margin: 0.2rem;\n}\nselect-input::after {\n  content: \'>\';\n  display: inline-block;\n  vertical-align: middle;\n  margin: 0 0.25rem;\n}\n</style>\n\n    <main data-array="path">\n        <template>\n            <select-input placeholder="File/Folder/Repo/Org" disabled="${scope.disabled}">\n                <select data-array="list">\n                    <template>\n                        <option data-type="${view.type}" data-hash="${view.sha}">\n                            ${view.login || view.name}\n                        </option>\n                    </template>\n                </select>\n            </select-input>\n        </template>\n    </main>\n</template>\n';
            exports.default = _default;
        }
    },
    './index': {
        base: '.',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            exports.default = void 0;

            var _webCell = require('web-cell');

            var _gitElement = _interopRequireDefault(require('git-element'));

            var _index = _interopRequireDefault(require('./index.html'));

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule
                    ? obj
                    : {
                          default: obj
                      };
            }

            var splice = [].splice,
                _path_ = new WeakMap();

            var GitPath = _decorate(
                [
                    (0, _webCell.component)({
                        template: _index.default
                    })
                ],
                function(_initialize, _gitElement$default) {
                    var GitPath =
                        /*#__PURE__*/
                        (function(_gitElement$default2) {
                            _inherits(GitPath, _gitElement$default2);

                            function GitPath() {
                                var _temp, _this;

                                _classCallCheck(this, GitPath);

                                ((_temp = _this = _possibleConstructorReturn(
                                    this,
                                    _getPrototypeOf(GitPath).call(this)
                                )),
                                _initialize(
                                    _assertThisInitialized(
                                        _assertThisInitialized(_this)
                                    )
                                ),
                                _temp).buildDOM();

                                _path_.set(
                                    _assertThisInitialized(
                                        _assertThisInitialized(_this)
                                    ),
                                    []
                                );

                                return _this;
                            }

                            return GitPath;
                        })(_gitElement$default);

                    return {
                        F: GitPath,
                        d: [
                            {
                                kind: 'get',
                                decorators: [_webCell.mapProperty],
                                static: true,
                                key: 'observedAttributes',
                                value: function value() {
                                    return ['disabled', 'user'];
                                }
                            },
                            {
                                kind: 'method',
                                decorators: [_webCell.mapData],
                                key: 'attributeChangedCallback',
                                value: function value() {}
                            },
                            {
                                kind: 'get',
                                key: 'value',
                                value: function value() {
                                    return _path_.get(this).join('/');
                                }
                            },
                            {
                                kind: 'get',
                                key: 'lastLevel',
                                value: function value() {
                                    return this.$('select')[
                                        _path_.get(this).length - 1
                                    ];
                                }
                            },
                            {
                                kind: 'get',
                                key: 'content',
                                value: function value() {
                                    var lastLevel = this.lastLevel;
                                    return _webCell.View.instanceOf(
                                        lastLevel.children[
                                            lastLevel.selectedIndex
                                        ]
                                    );
                                }
                            },
                            {
                                kind: 'method',
                                static: true,
                                key: 'typeOf',
                                value: function value(select) {
                                    return select.options[select.selectedIndex]
                                        .dataset.type;
                                }
                            },
                            {
                                kind: 'method',
                                key: 'viewChangedCallback',
                                value: (function() {
                                    var _value = _asyncToGenerator(
                                        /*#__PURE__*/
                                        regeneratorRuntime.mark(
                                            function _callee(_ref) {
                                                var user, orgs;
                                                return regeneratorRuntime.wrap(
                                                    function _callee$(
                                                        _context
                                                    ) {
                                                        while (1) {
                                                            switch (
                                                                (_context.prev =
                                                                    _context.next)
                                                            ) {
                                                                case 0:
                                                                    user =
                                                                        _ref.user;

                                                                    if (user) {
                                                                        _context.next = 3;
                                                                        break;
                                                                    }

                                                                    return _context.abrupt(
                                                                        'return'
                                                                    );

                                                                case 3:
                                                                    _context.next = 5;
                                                                    return _gitElement.default.fetch(
                                                                        'users/'.concat(
                                                                            user,
                                                                            '/orgs'
                                                                        )
                                                                    );

                                                                case 5:
                                                                    orgs =
                                                                        _context.sent;
                                                                    this.view.render(
                                                                        {
                                                                            path: [
                                                                                {
                                                                                    list: [
                                                                                        {
                                                                                            login: user
                                                                                        }
                                                                                    ].concat(
                                                                                        _toConsumableArray(
                                                                                            orgs
                                                                                        )
                                                                                    )
                                                                                }
                                                                            ]
                                                                        }
                                                                    );

                                                                    _path_
                                                                        .get(
                                                                            this
                                                                        )
                                                                        .splice(
                                                                            0,
                                                                            Infinity,
                                                                            user
                                                                        );

                                                                case 8:
                                                                case 'end':
                                                                    return _context.stop();
                                                            }
                                                        }
                                                    },
                                                    _callee,
                                                    this
                                                );
                                            }
                                        )
                                    );

                                    function value(_x) {
                                        return _value.apply(this, arguments);
                                    }

                                    return value;
                                })()
                            },
                            {
                                kind: 'method',
                                key: 'setRoute',
                                value: function value(index, name) {
                                    var lastLevel = this.lastLevel;

                                    _path_
                                        .get(this)
                                        .splice(index - 1, Infinity, name);

                                    if (!lastLevel.value)
                                        _webCell.View.instanceOf(
                                            lastLevel
                                        ).push({
                                            name: name
                                        });
                                    this.trigger('change', null, true);
                                }
                            },
                            {
                                kind: 'get',
                                key: 'contentURI',
                                value: function value() {
                                    var path = _path_.get(this);

                                    if (path[1])
                                        return 'repos/'
                                            .concat(path[0], '/')
                                            .concat(path[1], '/contents/')
                                            .concat(path.slice(2).join('/'));
                                }
                            },
                            {
                                kind: 'method',
                                key: 'setLevel',
                                value: function value(index, list) {
                                    var path = this.view.path;
                                    splice
                                        .call(path, index, Infinity)
                                        .forEach(function(old) {
                                            return old.content[0].remove();
                                        });
                                    path.data.splice(index, Infinity);
                                    path.push({
                                        list: list
                                    });
                                    this.$(
                                        'select-input:last-child'
                                    )[0].focus();
                                }
                            },
                            {
                                kind: 'method',
                                decorators: [
                                    (0, _webCell.on)('change', ':host select')
                                ],
                                key: 'openNext',
                                value: (function() {
                                    var _value3 = _asyncToGenerator(
                                        /*#__PURE__*/
                                        regeneratorRuntime.mark(
                                            function _callee2(_ref2, _ref3) {
                                                var target,
                                                    parentNode,
                                                    selectedIndex,
                                                    _value2,
                                                    level;

                                                return regeneratorRuntime.wrap(
                                                    function _callee2$(
                                                        _context2
                                                    ) {
                                                        while (1) {
                                                            switch (
                                                                (_context2.prev =
                                                                    _context2.next)
                                                            ) {
                                                                case 0:
                                                                    target =
                                                                        _ref2.target;
                                                                    (parentNode =
                                                                        _ref3.parentNode),
                                                                        (selectedIndex =
                                                                            _ref3.selectedIndex),
                                                                        (_value2 =
                                                                            _ref3.value);
                                                                    level =
                                                                        (0,
                                                                        _webCell.indexOf)(
                                                                            parentNode
                                                                        ) + 1;
                                                                    this.setRoute(
                                                                        level,
                                                                        _value2 ||
                                                                            parentNode.value
                                                                    );

                                                                    if (
                                                                        !(
                                                                            !_value2 ||
                                                                            GitPath.typeOf(
                                                                                target
                                                                            ) ===
                                                                                'file'
                                                                        )
                                                                    ) {
                                                                        _context2.next = 6;
                                                                        break;
                                                                    }

                                                                    return _context2.abrupt(
                                                                        'return'
                                                                    );

                                                                case 6:
                                                                    (this.style.cursor =
                                                                        'wait'),
                                                                        this.view.render(
                                                                            {
                                                                                disabled: true
                                                                            }
                                                                        );
                                                                    _context2.t0 = this;
                                                                    _context2.t1 = level;
                                                                    _context2.next = 11;
                                                                    return _gitElement.default.fetch(
                                                                        (level ===
                                                                        1
                                                                            ? ''
                                                                                  .concat(
                                                                                      selectedIndex
                                                                                          ? 'org'
                                                                                          : 'user',
                                                                                      's/'
                                                                                  )
                                                                                  .concat(
                                                                                      _value2,
                                                                                      '/repos'
                                                                                  )
                                                                            : this
                                                                                  .contentURI) +
                                                                            '?per_page=100'
                                                                    );

                                                                case 11:
                                                                    _context2.t2 =
                                                                        _context2.sent;

                                                                    _context2.t0.setLevel.call(
                                                                        _context2.t0,
                                                                        _context2.t1,
                                                                        _context2.t2
                                                                    );

                                                                    (this.style.cursor =
                                                                        'auto'),
                                                                        this.view.render(
                                                                            {
                                                                                disabled: false
                                                                            }
                                                                        );

                                                                case 14:
                                                                case 'end':
                                                                    return _context2.stop();
                                                            }
                                                        }
                                                    },
                                                    _callee2,
                                                    this
                                                );
                                            }
                                        )
                                    );

                                    function value(_x2, _x3) {
                                        return _value3.apply(this, arguments);
                                    }

                                    return value;
                                })()
                            }
                        ]
                    };
                },
                _gitElement.default
            );

            exports.default = GitPath;
        }
    },
    'web-cell': {
        exports: web_cell
    },
    'git-element': {
        exports: git_element
    }
};

    return _include_('./index');
});