//
//  Generated by https://www.npmjs.com/package/amd-bundle
//
(function (factory) {

    if ((typeof define === 'function')  &&  define.amd)
        define('git-pager', ["web-cell","git-element","marked"], factory);
    else if (typeof module === 'object')
        return  module.exports = factory.call(global,require('web-cell'),require('git-element'),require('marked'));
    else
        return  this['git-pager'] = factory.call(self,this['web-cell'],this['git-element'],this['marked']);

})(function (web_cell,git_element,marked) {

function merge(base, path) {
  return (base + '/' + path).replace(/\/\//g, '/').replace(/[^/.]+\/\.\.\//g, '').replace(/\.\//g, function (match, index, input) {
    return input[index - 1] === '.' ? match : '';
  });
}

function outPackage(name) {
  return /^[^./]/.test(name);
}

    var require = (typeof module === 'object') ?
        function () {

            return  module.require.apply(module, arguments);
        } : (
            this.require  ||  function (name) {

                if (self[name] != null)  return self[name];

                throw ReferenceError('Can\'t find "' + name + '" module');
            }
        );

    var _include_ = include.bind(null, './');

    function include(base, path) {

        path = outPackage( path )  ?  path  :  ('./' + merge(base, path));

        var module = _module_[path], exports;

        if (! module)  return require(path);

        if (! module.exports) {

            module.exports = { };

            var dependency = module.dependency;

            for (var i = 0;  dependency[i];  i++)
                module.dependency[i] = _include_( dependency[i] );

            exports = module.factory.apply(
                null,  module.dependency.concat(
                    include.bind(null, module.base),  module.exports,  module
                )
            );

            if (exports != null)  module.exports = exports;

            delete module.dependency;  delete module.factory;
        }

        return module.exports;
    }

function _slicedToArray(arr, i) {
    return (
        _arrayWithHoles(arr) ||
        _iterableToArrayLimit(arr, i) ||
        _nonIterableRest()
    );
}

function _nonIterableRest() {
    throw new TypeError('Invalid attempt to destructure non-iterable instance');
}

function _iterableToArrayLimit(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;
    try {
        for (
            var _i = arr[Symbol.iterator](), _s;
            !(_n = (_s = _i.next()).done);
            _n = true
        ) {
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally {
        try {
            if (!_n && _i['return'] != null) _i['return']();
        } finally {
            if (_d) throw _e;
        }
    }
    return _arr;
}

function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}

function _asyncToGenerator(fn) {
    return function() {
        var self = this,
            args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(
                    gen,
                    resolve,
                    reject,
                    _next,
                    _throw,
                    'next',
                    value
                );
            }
            function _throw(err) {
                asyncGeneratorStep(
                    gen,
                    resolve,
                    reject,
                    _next,
                    _throw,
                    'throw',
                    err
                );
            }
            _next(undefined);
        });
    };
}

var _module_ = {
    './utility': {
        base: '.',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            exports.fileOf = fileOf;
            exports.pageOf = pageOf;
            exports.isGitMarkdown = isGitMarkdown;
            exports.$order = $order;
            exports.wrapTemplate = wrapTemplate;
            exports.contentOf = contentOf;

            var _webCell = require('web-cell');

            var _gitElement = _interopRequireDefault(require('git-element'));

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule
                    ? obj
                    : {
                          default: obj
                      };
            }
            /**
             * @param {String|URL} URI - GitHub content URL
             *
             * @return {String} File content
             */

            function fileOf(_x) {
                return _fileOf.apply(this, arguments);
            }
            /**
             * @param {String} repository - For example: `userID/repo`
             * @param {String} path       - File path in `repository`
             *
             * @return {String} GitHub Pages URL of this file
             */

            function _fileOf() {
                _fileOf = _asyncToGenerator(
                    /*#__PURE__*/
                    regeneratorRuntime.mark(function _callee(URI) {
                        return regeneratorRuntime.wrap(
                            function _callee$(_context) {
                                while (1) {
                                    switch ((_context.prev = _context.next)) {
                                        case 0:
                                            _context.t0 = self;
                                            _context.next = 3;
                                            return _gitElement.default.fetch(
                                                URI
                                            );

                                        case 3:
                                            _context.t1 = _context.sent.content;
                                            return _context.abrupt(
                                                'return',
                                                _context.t0.atob.call(
                                                    _context.t0,
                                                    _context.t1
                                                )
                                            );

                                        case 5:
                                        case 'end':
                                            return _context.stop();
                                    }
                                }
                            },
                            _callee,
                            this
                        );
                    })
                );
                return _fileOf.apply(this, arguments);
            }

            function pageOf(repository, path) {
                repository = repository.split('/');
                repository[0] += '.github.io';
                return (
                    '' +
                    new URL(
                        path,
                        'https://'
                            .concat(repository[0], '/')
                            .concat(
                                repository[0] === repository[1]
                                    ? ''
                                    : repository[1] + '/'
                            )
                    )
                );
            }
            /**
             * @param {String|URL} URI - File path
             *
             * @return {Boolean}
             */

            function isGitMarkdown(URI) {
                return (
                    /\.(md|markdown)/i.test(URI) ||
                    /^(ReadMe|Contributing|License)\.?/.test(URI)
                );
            }
            /**
             * @param {String}                            selector
             * @param {Element|DocumentFragment|Document} [context=document]
             *
             * @return {?Element} Fisrt one found in order
             */

            function $order(selector) {
                var context =
                    arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : document;
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (
                        var _iterator = selector
                                .split(/\s*,\s*/)
                                [Symbol.iterator](),
                            _step;
                        !(_iteratorNormalCompletion = (_step = _iterator.next())
                            .done);
                        _iteratorNormalCompletion = true
                    ) {
                        var one = _step.value;
                        if ((one = context.querySelector(one))) return one;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (
                            !_iteratorNormalCompletion &&
                            _iterator.return != null
                        ) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
            /**
             * @param {String|URL} URI              - Template HTML URL or GitHub content URL
             * @param {Object}     data
             * @param {String}     data.title       - Site title
             * @param {String}     data.description - Site description
             * @param {String}     data.author      - Article author
             * @param {String}     data.content     - Article HTML source code
             *
             * @return {HTMLDocument}
             */

            function wrapTemplate(_x2, _x3) {
                return _wrapTemplate.apply(this, arguments);
            }
            /**
             * @param {String} HTML - HTML source code
             *
             * @return {String} HTML source code of Article content
             */

            function _wrapTemplate() {
                _wrapTemplate = _asyncToGenerator(
                    /*#__PURE__*/
                    regeneratorRuntime.mark(function _callee2(URI, _ref) {
                        var title,
                            description,
                            author,
                            content,
                            template,
                            heading;
                        return regeneratorRuntime.wrap(
                            function _callee2$(_context2) {
                                while (1) {
                                    switch ((_context2.prev = _context2.next)) {
                                        case 0:
                                            (title = _ref.title),
                                                (description =
                                                    _ref.description),
                                                (author = _ref.author),
                                                (content = _ref.content);

                                            if (!/^(https?:)\/\//.test(URI)) {
                                                _context2.next = 7;
                                                break;
                                            }

                                            _context2.next = 4;
                                            return self.fetch(URI);

                                        case 4:
                                            _context2.t0 = _context2.sent.text();
                                            _context2.next = 8;
                                            break;

                                        case 7:
                                            _context2.t0 = fileOf(URI);

                                        case 8:
                                            template = _context2.t0;
                                            _context2.t1 = new DOMParser();
                                            _context2.next = 12;
                                            return template;

                                        case 12:
                                            _context2.t2 = _context2.sent;
                                            template = _context2.t1.parseFromString.call(
                                                _context2.t1,
                                                _context2.t2,
                                                'text/html'
                                            );
                                            heading = $order(
                                                'h1, h2, h3, h4, h5, h6, header',
                                                (0, _webCell.parseDOM)(content)
                                            );

                                            if (heading) {
                                                _context2.next = 17;
                                                break;
                                            }

                                            throw SyntaxError(
                                                'Articles should have a title (heading)'
                                            );

                                        case 17:
                                            new _webCell.ObjectView(
                                                template.documentElement
                                            ).render({
                                                site: {
                                                    title: title,
                                                    description: description
                                                },
                                                article: {
                                                    author: author,
                                                    title: heading.textContent.trim(),
                                                    content: content
                                                }
                                            });
                                            return _context2.abrupt(
                                                'return',
                                                template
                                            );

                                        case 19:
                                        case 'end':
                                            return _context2.stop();
                                    }
                                }
                            },
                            _callee2,
                            this
                        );
                    })
                );
                return _wrapTemplate.apply(this, arguments);
            }

            function contentOf(HTML) {
                if (!/<(html|head|body)[\s\S]*?>/.test(HTML)) return HTML;
                HTML = new DOMParser().parseFromString(HTML, 'text/html');
                if ((HTML = $order('article, main, body', HTML)))
                    return HTML.innerHTML;
            }
        }
    },
    './index': {
        base: '.',
        dependency: [],
        factory: function factory(require, exports, module) {
            var _webCell = require('web-cell');

            var _gitElement = _interopRequireDefault(require('git-element'));

            var _utility = require('./utility');

            var _marked = _interopRequireDefault(require('marked'));

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule
                    ? obj
                    : {
                          default: obj
                      };
            }

            _webCell.documentReady.then(function() {
                var main_view = new _webCell.ObjectView(document.body),
                    git_user = (0, _webCell.$)('git-user')[0],
                    _ref2 = (0, _webCell.$)('page-template'),
                    _ref3 = _slicedToArray(_ref2, 1),
                    article_template = _ref3[0],
                    _ref4 = (0, _webCell.$)('git-path'),
                    _ref5 = _slicedToArray(_ref4, 1),
                    article_path = _ref5[0],
                    editor = (0, _webCell.$)('text-editor')[0];

                if (self.localStorage.token)
                    git_user.token = self.localStorage.token;
                document.addEventListener('signin', function(_ref6) {
                    var detail = _ref6.detail;
                    article_template.user = article_path.user = detail.login;
                    self.localStorage.token = detail.token;
                    document.forms[0].hidden = false;
                });
                document.addEventListener('signout', function() {
                    article_template.user = article_path.user = '';
                    delete self.localStorage.token;
                    document.forms[0].hidden = true;
                });
                article_path.on(
                    'change',
                    /*#__PURE__*/
                    (function() {
                        var _ref8 = _asyncToGenerator(
                            /*#__PURE__*/
                            regeneratorRuntime.mark(function _callee3(_ref7) {
                                var _ref7$target, content, contentURI;

                                return regeneratorRuntime.wrap(
                                    function _callee3$(_context3) {
                                        while (1) {
                                            switch (
                                                (_context3.prev =
                                                    _context3.next)
                                            ) {
                                                case 0:
                                                    (_ref7$target =
                                                        _ref7.target),
                                                        (content =
                                                            _ref7$target.content),
                                                        (contentURI =
                                                            _ref7$target.contentURI);

                                                    if (
                                                        !(
                                                            !content ||
                                                            content.type !==
                                                                'file'
                                                        )
                                                    ) {
                                                        _context3.next = 3;
                                                        break;
                                                    }

                                                    return _context3.abrupt(
                                                        'return'
                                                    );

                                                case 3:
                                                    _context3.next = 5;
                                                    return (0, _utility.fileOf)(
                                                        contentURI
                                                    );

                                                case 5:
                                                    content = _context3.sent;

                                                    if (
                                                        (0,
                                                        _utility.isGitMarkdown)(
                                                            contentURI
                                                        )
                                                    ) {
                                                        content = (0,
                                                        _marked.default)(
                                                            content
                                                        );
                                                        editor.disabled = true;
                                                    } else {
                                                        if (
                                                            /\.html?$/.test(
                                                                contentURI
                                                            )
                                                        )
                                                            content = (0,
                                                            _utility.contentOf)(
                                                                content
                                                            );
                                                        editor.disabled = false;
                                                    }

                                                    editor.value = content;
                                                    main_view.render({
                                                        pageURL: (0,
                                                        _utility.pageOf)(
                                                            article_path.repository,
                                                            article_path.path
                                                        )
                                                    });

                                                case 9:
                                                case 'end':
                                                    return _context3.stop();
                                            }
                                        }
                                    },
                                    _callee3,
                                    this
                                );
                            })
                        );

                        return function(_x4) {
                            return _ref8.apply(this, arguments);
                        };
                    })()
                );
                document.addEventListener(
                    'submit',
                    /*#__PURE__*/
                    (function() {
                        var _ref9 = _asyncToGenerator(
                            /*#__PURE__*/
                            regeneratorRuntime.mark(function _callee4(event) {
                                var contentURI,
                                    content,
                                    _event$target$element,
                                    title,
                                    description,
                                    message,
                                    data;

                                return regeneratorRuntime.wrap(
                                    function _callee4$(_context4) {
                                        while (1) {
                                            switch (
                                                (_context4.prev =
                                                    _context4.next)
                                            ) {
                                                case 0:
                                                    event.preventDefault();
                                                    (contentURI =
                                                        article_path.contentURI),
                                                        (content =
                                                            article_path.content),
                                                        (_event$target$element =
                                                            event.target
                                                                .elements),
                                                        (title =
                                                            _event$target$element.title),
                                                        (description =
                                                            _event$target$element.description),
                                                        (message =
                                                            _event$target$element.message);
                                                    _context4.prev = 2;
                                                    _context4.t0 =
                                                        _gitElement.default;
                                                    _context4.t1 = contentURI;
                                                    _context4.t2 =
                                                        message.value;
                                                    _context4.t3 = self;
                                                    _context4.t4 = (0,
                                                    _webCell.stringifyDOM);
                                                    _context4.next = 10;
                                                    return (0,
                                                    _utility.wrapTemplate)(
                                                        article_template.value,
                                                        {
                                                            title: title.value,
                                                            description:
                                                                description.value,
                                                            author:
                                                                git_user.session
                                                                    .email,
                                                            content:
                                                                editor.value
                                                        }
                                                    );

                                                case 10:
                                                    _context4.t5 =
                                                        _context4.sent;
                                                    _context4.t6 = (0,
                                                    _context4.t4)(_context4.t5);
                                                    _context4.t7 = _context4.t3.btoa.call(
                                                        _context4.t3,
                                                        _context4.t6
                                                    );
                                                    _context4.t8 = content.sha;
                                                    _context4.t9 = {
                                                        message: _context4.t2,
                                                        content: _context4.t7,
                                                        sha: _context4.t8
                                                    };
                                                    _context4.next = 17;
                                                    return _context4.t0.fetch.call(
                                                        _context4.t0,
                                                        _context4.t1,
                                                        'PUT',
                                                        _context4.t9
                                                    );

                                                case 17:
                                                    data = _context4.sent;
                                                    content.render(
                                                        data.content
                                                    );
                                                    self.alert(
                                                        'Commit success!'
                                                    );
                                                    _context4.next = 25;
                                                    break;

                                                case 22:
                                                    _context4.prev = 22;
                                                    _context4.t10 = _context4[
                                                        'catch'
                                                    ](2);
                                                    self.alert(
                                                        _context4.t10.message
                                                    );

                                                case 25:
                                                case 'end':
                                                    return _context4.stop();
                                            }
                                        }
                                    },
                                    _callee4,
                                    this,
                                    [[2, 22]]
                                );
                            })
                        );

                        return function(_x5) {
                            return _ref9.apply(this, arguments);
                        };
                    })()
                );
            });
        }
    },
    'web-cell': {
        exports: web_cell
    },
    'git-element': {
        exports: git_element
    },
    marked: {
        exports: marked
    }
};

    return _include_('./index');
});